#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Created on Fri 6 Feb 2023

@author: Enrico Pedretti
@author: Paolo Restuccia

Xsorb is a lightweight, flexible and user-friendly tool to generate and run ab initio calculations of molecules adsorbed over substrates,
relying on Quantum Espresso for DFT calculations and on ASE & Pymatgen to generate the adsorption structures

More info on the program's usage can be found at:
https://gitlab.com/triboteam/xsorbed/-/wikis/home

"""

import sys
from xsorbed.cli_parser import cli_parse_xsorb
from xsorbed.common_definitions import VERSION

#NOTE: dire che xsorb supporta ibrav
#TODO: dictionary.get(keyname, value) #se non c'Ã¨ la chiave ritorna value. Sostituire i vari if con questo

def main():

    print('xSorb version {0}'.format(VERSION))

    if(len(sys.argv) == 1): 
        print("No command provided. The program will now terminate.")
        return 1
    
    args = cli_parse_xsorb()

    #import statements##########################################################################
    #they are imported here since the import is quite slow, so the help can be shown immediately
    from io_utils import write_results_to_file, restart_jobs, saveas
    from calculations import generate, launch_screening, final_relax, regenerate_missing_sitelabels
    from postprocess import plot_adsorption_sites, config_images, view_config, relax_animations, plot_energy_evolution
    ############################################################################################

    #calc
    if(args.g):
        generate(SAVEFIG=args.save_figs)

    elif(args.s):
        launch_screening(SAVEFIG=args.save_figs)

    elif(args.r):
        final_relax(n_configs=args.n, threshold=args.t, exclude=args.exclude, required_indices=args.i, REGENERATE=args.regenerate, BY_SITE=args.by_site)

    elif(args.restart):
        restart_jobs(calc_type = 'SCREENING' if args.restart == 's' else 'RELAX')

    elif(args.regenerate_labels):
        regenerate_missing_sitelabels()



    #energies
    elif(args.e):
        write_results_to_file(TXT=args.txt)
    
    elif(args.plot_energies_scr):
        plot_energy_evolution(calc_type = 'SCREENING')
    
    elif(args.plot_energies):
        plot_energy_evolution(calc_type = 'RELAX')


    #visualization
    elif(args.sites or args.sites_all):
        plot_adsorption_sites(ALL = args.sites_all)

    elif(args.screening_images):
        config_images(calc_type='SCREENING', i_or_f = args.screening_images[0],
                      rotations=args.rotation, povray=args.povray, 
                      width_res=args.width_res, depth_cueing=args.depth_cueing, 
                      center_molecule=args.center_mol, cut_vacuum=args.cut_vacuum)

    elif(args.relax_images):
        config_images(calc_type='RELAX', i_or_f = args.relax_images[0], 
                      rotations=args.rotation, povray=args.povray, 
                      width_res=args.width_res, depth_cueing=args.depth_cueing, 
                      center_molecule=args.center_mol, cut_vacuum=args.cut_vacuum)

    #elif(args.render_image):
    #    config_images(which=args.render_image[0][0], index=args.render_image[0][1:], 
    #        rotations = args.render_image[1], povray=args.povray, width_res=args.width_res)

    elif(args.relax_animations or args.screening_animations):
        relax_animations('SCREENING' if args.screening_animations else 'RELAX', 
                         povray=args.povray, width_res=args.width_res, 
                         depth_cueing=args.depth_cueing, cut_vacuum=args.cut_vacuum)

    elif(args.view):
        view_config('SCREENING' if args.view[0] == 's' else 'RELAX', in_or_out = args.view[1], index=int(args.view[2]))

    elif(args.savefiles is not None):
        saveas(calc_type=args.savefiles[1],  i_or_f = args.savefiles[2], saveas_format=args.savefiles[0])



if __name__ == '__main__':
    sys.exit(main())
