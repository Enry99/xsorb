#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Created on Fri 6 Feb 2023

@author: Enrico Pedretti
@author: Paolo Restuccia

Python script based on Pymatgen and ASE to build adatom adsorption on slabs calculated with Quantum ESPRESSO


# @Brief summary of the program:
# -Reads slab from file (many types supported, e.g. pwi/pwo, .xyz, .cif, POSCAR ...). The slab is assumed to be already relaxed.

# -Reads molecule from file. You must provide the indices of the two atoms that will define the x axis direction, or directly specify
#   the vector that will be taken as the x axis for the rotations.
#   It is also possible to select only a subset of the atoms by specifying the indices in the file. This can be useful to create fragments.

# -Finds all adsorption sites on the surface, optionally saves a .png with the identified sites.
#    If too many sites are identified, try to adjust (increase) the two threshold parameters 
#    'symm_reduce' and 'near_reduce' in the sites_find_args dictionary. 
#    Optionally you can also manually select the sites by specifying them with the indices plotted in the 
#    image generated with the option -sites. Note that by setting symm_reduce = 0 the program finds
#    ALL the high-symmetry sites, from which you can choose those that you want. 

# -Generates all the desired orientations of the molecule after translating to the origin the selected atom of the molecule, 
#    which will be later placed above the slab in the adsorption sites. 
#    NOTE: the selected atom index must be the one in the input file,
#    even if only a subset of the molecule is selected. The rotations are performed in the following order:
#    1) rotations along x axis ("screw")
#    2) rotations along y axis ("verticality": 0 = molecule horizontal, 90 = molecule vertical)
#    3) rotations along z axis (rotations in the horizontal plane)
#    
#    Optionally saves a .png with all the orientations viewed from above.

# -Generates configurations for all orientations placing the selected atom above all adsorption sites. Each configuration is labeled by an integer index.
#    In order to identify the labels, a table is written into a .csv containing label, xrot_angle, yrot_angle, z_rot_angle, site_type, x_site, y_site, z_site

# -Writes the .pwi for all the generated configurations and submits all the jobs in parallel for the scf screening.
#    Optionally it is possible to just generate the .pwi(s) without launching the jobs (useful for checking the generated
#    configurations before starting the calculations)
#    Optionally writes also the xsf files for visualization (so you can open them also with VESTA)

# -After the scf screening is completed, the scf energies can be extracted and are saved into a .csv

# -Finally, the configurations close to the energy minimum (within a threshold) calculated
#    with the scf screening can be relaxed to find the adsorption energies.

# -The parameters of the scripts (and of Espresso) must be set in the settings.in file, for which a template example
#    with all the mandatory and optional flags is provided.

"""

#Import statements#####################################################################
import os, sys
import argparse
#
from filenames import *
########################################################################################



def cli_parse():

    parser = argparse.ArgumentParser(
        description='Select one of the commands below. The program will read further input informations from the file "settings.in"'
        )

    parser.add_argument('--v', '--version', action='version', version='%(prog)s '+VERSION)


    calc_group = parser.add_argument_group(title='Calculation options')
    #main flags
    main_calc = calc_group.add_mutually_exclusive_group()
    main_calc.add_argument('-g', action='store_true', help='generate all pwi(s) and a csv file with config labels, without submitting the jobs')
    main_calc.add_argument('-s', action='store_true', help='launch scf screening')
    main_calc.add_argument('-r', action='store_true', help='launch relaxations')
    main_calc.add_argument('-restart', choices=['s', 'r'], help='restart all (unfinished) scf or relax calculations')
    #optional flags
    calc_group.add_argument('--save-figs', action='store_true', help='plot also the figures (sites + molecule orientations) when using -g or -r')
    calc_group.add_argument('--saveas', type=str, help='generate also files in the desiered format besides the pwi(s), e.g. cif, xyz, ...')
    calc_group.add_argument('--t', type=float, help='energy threshold above minimum (in eV) for choosing the configurations for the final relaxation')
    calc_group.add_argument('--i', nargs='+', type=int, help='select specific configurations (by label) for relaxation')
    calc_group.add_argument('--exclude', nargs='+', type=int, help='exclude selected configurations from the final relaxation when using threshold --t')



    energy_group = parser.add_argument_group(title='Energies collection options')  
    #main flags
    main_energy = energy_group.add_mutually_exclusive_group()
    main_energy.add_argument('-es', action='store_true', help='save scf energies to csv')
    main_energy.add_argument('-er', action='store_true', help='save relax energies to csv')
    main_energy.add_argument('-plot-energies', action='store_true', help='save image with energies evolution during relax')


    visualization_group = parser.add_argument_group(title='Visualization options')
    #main flags
    main_visual = visualization_group.add_mutually_exclusive_group()
    main_visual.add_argument('-sites', action='store_true',  help='plot the identified high-symmetry sites sites with labels')
    main_visual.add_argument('-scf-images', action='store_true', help='save images of the scf configurations')
    main_visual.add_argument('-relax-images', action='store_true', help='save images of the relaxations')
    main_visual.add_argument('-relax-gifs', action='store_true', help='save gif animations of the relaxations (even if not completed)')
    main_visual.add_argument('-view', type=str, help='select which config to open with ase gui (syntax: [s/r][index], e.g. s3)')
    main_visual.add_argument('-savefiles', nargs=2, help='save files in specific format (syntax: [format] [calc_type], e.g. cif relax)')
    #optional flags
    visualization_group.add_argument('--povray', action='store_true', help='use povray to render images (if installed)')
    visualization_group.add_argument('--width-res', type=int, help='resolution width (in pixel) for povray')


    #parsing the command line
    args = parser.parse_args()


    #Check presence of incompatible commands belonging to different groups
    args_dict = vars(args)
    calc_command = [ key for key in args_dict if args_dict[key] and (key=='s' or key=='g' or key=='r' or key=='restart') ]
    energy_command = [ key for key in args_dict if args_dict[key] and (key=='es' or key=='er') ]
    visual_command = [ key for key in args_dict if args_dict[key] and (key=='sites' or key=='scf-images'  
        or key=='relax-images' or key=='relax-gifs' or key=='view') ]

    if calc_command and energy_command:
        parser.error("argument -{1}: not allowed with argument -{0}".format(calc_command[0], energy_command[0]))
    elif calc_command and visual_command:
        parser.error("argument -{1}: not allowed with argument -{0}".format(calc_command[0], visual_command[0]))
    elif energy_command and visual_command:
        parser.error("argument -{1}: not allowed with argument -{0}".format(energy_command[0], visual_command[0]))
  

    #Check for all incompatible OPTIONAL arguments
    if args.save_figs and not args.g and not args.s:
        parser.error("--save-figs option can only be used with -g or -s")
    if args.saveas and not args.g and not args.s and not args.r:
        parser.error("--saveas option can only be used with -g, -s or -r")
    if args.t and not args.r:
        parser.error("--t option can only be used with -r")
    if args.i and not args.r:
        parser.error("--t option can only be used with -r")
    if args.exclude and not args.r:
        parser.error("--exclude option can only be used with -r")
    if args.povray and not args.scf_images and not args.relax_images and not args.relax_gifs:
        parser.error("--povray option can only be used with -scf-images or -relax-images or -relax-gifs")
    if args.width_res is not None and not args.povray:
        parser.error("--width-res can be specified only for povray rendering")

    #Final check on values that are not already dealt with by argparse
    if(args.view):
        if args.view[0] != 's' and args.view[0] != 'r':
            parser.error('-view must be followed by a string in the form [s/r][int] e.g. s3')
        try:
            i = int(args.view[1:])
            if(i<0): raise RuntimeError("Index cannot be negative")
        except:
            parser.error('-view must be followed by a string in the form [s/r][int] e.g. s3 (with int >=0)')

    return args


def main():

    print('xSorb version {0}\n'.format(VERSION))
    
    args = cli_parse()

    #import statements##########################################################################
    #they are imported here since the import is quite slow, so the help can be shown immediately
    import input
    from settings import Settings
    from io_utils import get_energies, restart_jobs
    from calculations import generate, final_relax, saveas
    from postprocess import plot_adsorption_sites, config_images, view_config, relax_animations, plot_energy_evolution
    ############################################################################################

    #calc
    if(args.g):
        generate(SCF_RUN = False, SAVEFIG=args.save_figs, saveas_format=args.saveas)
    
    elif(args.s):
        generate(SCF_RUN = True, SAVEFIG=args.save_figs, saveas_format=args.saveas)

    elif(args.r):
        final_relax(args.t, exclude=args.exclude, indices=args.i)

    elif(args.restart):
        restart_jobs(which=args.restart, pwi_prefix=pwi_prefix, pwo_prefix=pwo_prefix)



    #energies
    elif(args.es):
        try:
            E_slab_mol = Settings().E_slab_mol
        except: #option in case settings.in or some other input file is no more present.
            E_slab_mol = []
        get_energies(scf_labels_filename, scf_energies_filename, E_slab_mol=E_slab_mol, pwo_prefix=pwo_prefix+'scf')

    elif(args.er):
        try:
            E_slab_mol = Settings().E_slab_mol
        except: #option in case settings.in or some other input file is no more present.
            E_slab_mol = []
        if not os.path.isfile(scf_energies_filename):
            get_energies(scf_labels_filename, scf_energies_filename, E_slab_mol=E_slab_mol, pwo_prefix=pwo_prefix+'scf')
            get_energies(scf_energies_filename, relax_energies_filename, E_slab_mol=E_slab_mol, pwo_prefix=pwo_prefix+'relax')
            os.remove(scf_energies_filename)
        else:    
            get_energies(scf_energies_filename, relax_energies_filename, E_slab_mol=E_slab_mol, pwo_prefix=pwo_prefix+'relax')
    
    elif(args.plot_energies):
        plot_energy_evolution()


    #visualization
    elif(args.sites):
        plot_adsorption_sites()

    elif(args.scf_images):
        config_images(which='scf', povray=args.povray, witdth_res=args.width_res)

    elif(args.relax_images):
        config_images(which='relax', povray=args.povray, witdth_res=args.width_res)

    elif(args.relax_gifs):
        relax_animations(povray=args.povray, witdth_res=args.width_res)

    elif(args.view):
        view_config(which=args.view[0], index=int(args.view[1:]))

    elif(args.savefiles is not None):
        saveas(which=args.savefiles[1], saveas_format=args.savefiles[0])



if __name__ == '__main__':
    sys.exit(main())
